import * as $spotware from "../spotware-messages"
import Events from "../spotware-events"
import {IProtoMessage, ProtoPayloadType, ProtoOAPayloadType} from "../spotware-messages";
import {SpotwareEventEmitter} from "../spotware-event-emitter"

{{#messages}}
{{^isProtoMessage}}
import {{{type}}} from "./{{{type}}}";
{{/isProtoMessage}}
{{/messages}}

{{#messages}}
{{^isProtoMessage}}
export * from "./{{{type}}}";
{{/isProtoMessage}}
{{/messages}}

type E = Exclude<Events, "PROTO_MESSAGE">;
type Message<M> = { message: M; clientMsgId?: string | null };

{{#messages}}
{{^isProtoMessage}}
export function to(event: "{{{eventName}}}", message: $spotware.I{{{type}}}, clientMsgId?: string | null): IProtoMessage;
{{/isProtoMessage}}
{{/messages}}
export function to(event: E, message: any, clientMsgId?: string | null): IProtoMessage {
  switch(event) {
{{#messages}}
{{^isProtoMessage}}
    case "{{{eventName}}}":
      return {{{type}}}.toProtoMessage(message, clientMsgId);
{{/isProtoMessage}}
{{/messages}}
  }
}

{{#messages}}
{{^isProtoMessage}}
export function from(event: "{{{eventName}}}", message: IProtoMessage): Message<$spotware.I{{{type}}}>;
{{/isProtoMessage}}
{{/messages}}
export function from(event: E, message: IProtoMessage): Message<any> {
  switch(event) {
{{#messages}}
{{^isProtoMessage}}
    case "{{{eventName}}}":
      return {{{type}}}.fromProtoMessage(message);
{{/isProtoMessage}}
{{/messages}}
  }
}

export function emitDecoded(
  emitter: SpotwareEventEmitter,
  message: IProtoMessage
): void {
  switch(message.payloadType as ProtoPayloadType | ProtoOAPayloadType) {
{{#messages}}
{{^isProtoMessage}}
    case {{{payloadType}}}:
      return {{{type}}}.emitDecoded(emitter, message);
{{/isProtoMessage}}
{{/messages}}
    default:
    throw new Error(`got unknown 'payloadType' (${message.payloadType})`);
  }
}