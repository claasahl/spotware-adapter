{
  "options": {
    "java_multiple_files": true,
    "java_generate_equals_and_hash": true,
    "java_package": "com.xtrader.protocol.openapi.v2.model",
    "java_outer_classname": "ContainerOpenApiV2ModelMessages"
  },
  "nested": {
    "ProtoOAPayloadType": {
      "values": {
        "PROTO_OA_APPLICATION_AUTH_REQ": 2100,
        "PROTO_OA_APPLICATION_AUTH_RES": 2101,
        "PROTO_OA_ACCOUNT_AUTH_REQ": 2102,
        "PROTO_OA_ACCOUNT_AUTH_RES": 2103,
        "PROTO_OA_VERSION_REQ": 2104,
        "PROTO_OA_VERSION_RES": 2105,
        "PROTO_OA_NEW_ORDER_REQ": 2106,
        "PROTO_OA_TRAILING_SL_CHANGED_EVENT": 2107,
        "PROTO_OA_CANCEL_ORDER_REQ": 2108,
        "PROTO_OA_AMEND_ORDER_REQ": 2109,
        "PROTO_OA_AMEND_POSITION_SLTP_REQ": 2110,
        "PROTO_OA_CLOSE_POSITION_REQ": 2111,
        "PROTO_OA_ASSET_LIST_REQ": 2112,
        "PROTO_OA_ASSET_LIST_RES": 2113,
        "PROTO_OA_SYMBOLS_LIST_REQ": 2114,
        "PROTO_OA_SYMBOLS_LIST_RES": 2115,
        "PROTO_OA_SYMBOL_BY_ID_REQ": 2116,
        "PROTO_OA_SYMBOL_BY_ID_RES": 2117,
        "PROTO_OA_SYMBOLS_FOR_CONVERSION_REQ": 2118,
        "PROTO_OA_SYMBOLS_FOR_CONVERSION_RES": 2119,
        "PROTO_OA_SYMBOL_CHANGED_EVENT": 2120,
        "PROTO_OA_TRADER_REQ": 2121,
        "PROTO_OA_TRADER_RES": 2122,
        "PROTO_OA_TRADER_UPDATE_EVENT": 2123,
        "PROTO_OA_RECONCILE_REQ": 2124,
        "PROTO_OA_RECONCILE_RES": 2125,
        "PROTO_OA_EXECUTION_EVENT": 2126,
        "PROTO_OA_SUBSCRIBE_SPOTS_REQ": 2127,
        "PROTO_OA_SUBSCRIBE_SPOTS_RES": 2128,
        "PROTO_OA_UNSUBSCRIBE_SPOTS_REQ": 2129,
        "PROTO_OA_UNSUBSCRIBE_SPOTS_RES": 2130,
        "PROTO_OA_SPOT_EVENT": 2131,
        "PROTO_OA_ORDER_ERROR_EVENT": 2132,
        "PROTO_OA_DEAL_LIST_REQ": 2133,
        "PROTO_OA_DEAL_LIST_RES": 2134,
        "PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_REQ": 2135,
        "PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_REQ": 2136,
        "PROTO_OA_GET_TRENDBARS_REQ": 2137,
        "PROTO_OA_GET_TRENDBARS_RES": 2138,
        "PROTO_OA_EXPECTED_MARGIN_REQ": 2139,
        "PROTO_OA_EXPECTED_MARGIN_RES": 2140,
        "PROTO_OA_MARGIN_CHANGED_EVENT": 2141,
        "PROTO_OA_ERROR_RES": 2142,
        "PROTO_OA_CASH_FLOW_HISTORY_LIST_REQ": 2143,
        "PROTO_OA_CASH_FLOW_HISTORY_LIST_RES": 2144,
        "PROTO_OA_GET_TICKDATA_REQ": 2145,
        "PROTO_OA_GET_TICKDATA_RES": 2146,
        "PROTO_OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT": 2147,
        "PROTO_OA_CLIENT_DISCONNECT_EVENT": 2148,
        "PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_REQ": 2149,
        "PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_RES": 2150,
        "PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_REQ": 2151,
        "PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_RES": 2152,
        "PROTO_OA_ASSET_CLASS_LIST_REQ": 2153,
        "PROTO_OA_ASSET_CLASS_LIST_RES": 2154,
        "PROTO_OA_DEPTH_EVENT": 2155,
        "PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_REQ": 2156,
        "PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_RES": 2157,
        "PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_REQ": 2158,
        "PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_RES": 2159,
        "PROTO_OA_SYMBOL_CATEGORY_REQ": 2160,
        "PROTO_OA_SYMBOL_CATEGORY_RES": 2161,
        "PROTO_OA_ACCOUNT_LOGOUT_REQ": 2162,
        "PROTO_OA_ACCOUNT_LOGOUT_RES": 2163,
        "PROTO_OA_ACCOUNT_DISCONNECT_EVENT": 2164
      },
      "comments": {
        "PROTO_OA_APPLICATION_AUTH_REQ": null,
        "PROTO_OA_APPLICATION_AUTH_RES": null,
        "PROTO_OA_ACCOUNT_AUTH_REQ": null,
        "PROTO_OA_ACCOUNT_AUTH_RES": null,
        "PROTO_OA_VERSION_REQ": null,
        "PROTO_OA_VERSION_RES": null,
        "PROTO_OA_NEW_ORDER_REQ": null,
        "PROTO_OA_TRAILING_SL_CHANGED_EVENT": null,
        "PROTO_OA_CANCEL_ORDER_REQ": null,
        "PROTO_OA_AMEND_ORDER_REQ": null,
        "PROTO_OA_AMEND_POSITION_SLTP_REQ": null,
        "PROTO_OA_CLOSE_POSITION_REQ": null,
        "PROTO_OA_ASSET_LIST_REQ": null,
        "PROTO_OA_ASSET_LIST_RES": null,
        "PROTO_OA_SYMBOLS_LIST_REQ": null,
        "PROTO_OA_SYMBOLS_LIST_RES": null,
        "PROTO_OA_SYMBOL_BY_ID_REQ": null,
        "PROTO_OA_SYMBOL_BY_ID_RES": null,
        "PROTO_OA_SYMBOLS_FOR_CONVERSION_REQ": null,
        "PROTO_OA_SYMBOLS_FOR_CONVERSION_RES": null,
        "PROTO_OA_SYMBOL_CHANGED_EVENT": null,
        "PROTO_OA_TRADER_REQ": null,
        "PROTO_OA_TRADER_RES": null,
        "PROTO_OA_TRADER_UPDATE_EVENT": null,
        "PROTO_OA_RECONCILE_REQ": null,
        "PROTO_OA_RECONCILE_RES": null,
        "PROTO_OA_EXECUTION_EVENT": null,
        "PROTO_OA_SUBSCRIBE_SPOTS_REQ": null,
        "PROTO_OA_SUBSCRIBE_SPOTS_RES": null,
        "PROTO_OA_UNSUBSCRIBE_SPOTS_REQ": null,
        "PROTO_OA_UNSUBSCRIBE_SPOTS_RES": null,
        "PROTO_OA_SPOT_EVENT": null,
        "PROTO_OA_ORDER_ERROR_EVENT": null,
        "PROTO_OA_DEAL_LIST_REQ": null,
        "PROTO_OA_DEAL_LIST_RES": null,
        "PROTO_OA_SUBSCRIBE_LIVE_TRENDBAR_REQ": null,
        "PROTO_OA_UNSUBSCRIBE_LIVE_TRENDBAR_REQ": null,
        "PROTO_OA_GET_TRENDBARS_REQ": null,
        "PROTO_OA_GET_TRENDBARS_RES": null,
        "PROTO_OA_EXPECTED_MARGIN_REQ": null,
        "PROTO_OA_EXPECTED_MARGIN_RES": null,
        "PROTO_OA_MARGIN_CHANGED_EVENT": null,
        "PROTO_OA_ERROR_RES": null,
        "PROTO_OA_CASH_FLOW_HISTORY_LIST_REQ": null,
        "PROTO_OA_CASH_FLOW_HISTORY_LIST_RES": null,
        "PROTO_OA_GET_TICKDATA_REQ": null,
        "PROTO_OA_GET_TICKDATA_RES": null,
        "PROTO_OA_ACCOUNTS_TOKEN_INVALIDATED_EVENT": null,
        "PROTO_OA_CLIENT_DISCONNECT_EVENT": null,
        "PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_REQ": null,
        "PROTO_OA_GET_ACCOUNTS_BY_ACCESS_TOKEN_RES": null,
        "PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_REQ": null,
        "PROTO_OA_GET_CTID_PROFILE_BY_TOKEN_RES": null,
        "PROTO_OA_ASSET_CLASS_LIST_REQ": null,
        "PROTO_OA_ASSET_CLASS_LIST_RES": null,
        "PROTO_OA_DEPTH_EVENT": null,
        "PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_REQ": null,
        "PROTO_OA_SUBSCRIBE_DEPTH_QUOTES_RES": null,
        "PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_REQ": null,
        "PROTO_OA_UNSUBSCRIBE_DEPTH_QUOTES_RES": null,
        "PROTO_OA_SYMBOL_CATEGORY_REQ": null,
        "PROTO_OA_SYMBOL_CATEGORY_RES": null,
        "PROTO_OA_ACCOUNT_LOGOUT_REQ": null,
        "PROTO_OA_ACCOUNT_LOGOUT_RES": null,
        "PROTO_OA_ACCOUNT_DISCONNECT_EVENT": null
      }
    },
    "ProtoOAAsset": {
      "fields": {
        "assetId": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "The unique asset ID."
        },
        "name": {
          "rule": "required",
          "type": "string",
          "id": 2,
          "comment": "The unique asset ID."
        },
        "displayName": {
          "type": "string",
          "id": 3,
          "comment": "The asset name."
        }
      },
      "comment": "Asset entity."
    },
    "ProtoOASymbol": {
      "fields": {
        "symbolId": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "The unique identifier of the symbol in specific server environment within cTrader platform. Different servers have different IDs."
        },
        "digits": {
          "rule": "required",
          "type": "int32",
          "id": 2,
          "comment": "The unique identifier of the symbol in specific server environment within cTrader platform. Different servers have different IDs."
        },
        "pipPosition": {
          "rule": "required",
          "type": "int32",
          "id": 3,
          "comment": "Number of price digits to be displayed."
        },
        "enableShortSelling": {
          "type": "bool",
          "id": 4,
          "comment": "Pip position on digits."
        },
        "guaranteedStopLoss": {
          "type": "bool",
          "id": 5,
          "comment": "If TRUE then the short selling with the symbol is enabled."
        },
        "swapRollover3Days": {
          "type": "ProtoOADayOfWeek",
          "id": 6,
          "options": { "default": "MONDAY" },
          "comment": "If TRUE then setting of guaranteedStopLoss is available for limited risk accounts."
        },
        "swapLong": {
          "type": "double",
          "id": 7,
          "comment": "Day of the week when SWAP charge amount will be tripled. Doesn't impact Rollover Commission."
        },
        "swapShort": {
          "type": "double",
          "id": 8,
          "comment": "SWAP charge for long positions."
        },
        "maxVolume": {
          "type": "int64",
          "id": 9,
          "comment": "SWAP charge for short positions."
        },
        "minVolume": {
          "type": "int64",
          "id": 10,
          "comment": "Maximum allowed volume in cents for an order with a symbol."
        },
        "stepVolume": {
          "type": "int64",
          "id": 11,
          "comment": "Minimum allowed volume in cents for an order with a symbol."
        },
        "maxExposure": {
          "type": "uint64",
          "id": 12,
          "comment": "Step of the volume in cents for an order."
        },
        "schedule": {
          "rule": "repeated",
          "type": "ProtoOAInterval",
          "id": 13,
          "options": { "packed": false },
          "comment": "Value of max exposure per symbol, per account. Blocks execution if breached."
        },
        "commission": {
          "rule": "required",
          "type": "int64",
          "id": 14,
          "comment": "Symbol trading interval, specified in seconds starting from SUNDAY 00:00 in specified time zone."
        },
        "commissionType": {
          "type": "ProtoOACommissionType",
          "id": 15,
          "options": { "default": "USD_PER_MIL_USD" },
          "comment": "Commission base amount. Total commission depends on commissionType."
        },
        "slDistance": {
          "type": "uint32",
          "id": 16,
          "comment": "Commission type. See ProtoOACommissionType for details."
        },
        "tpDistance": {
          "type": "uint32",
          "id": 17,
          "comment": "Minimum allowed distance between stop loss and current market price."
        },
        "gslDistance": {
          "type": "uint32",
          "id": 18,
          "comment": "Minimum allowed distance between take profit and current market price."
        },
        "gslCharge": {
          "type": "int64",
          "id": 19,
          "comment": "Minimum allowed distance between guaranteed stop loss and current market price."
        },
        "distanceSetIn": {
          "type": "ProtoOASymbolDistanceType",
          "id": 20,
          "options": { "default": "SYMBOL_DISTANCE_IN_POINTS" },
          "comment": "Guaranteed stop loss fee."
        },
        "minCommission": {
          "type": "int64",
          "id": 21,
          "comment": "Unit of distance measure for slDistance, tpDistance, gslDistance."
        },
        "minCommissionType": {
          "type": "ProtoOAMinCommissionType",
          "id": 22,
          "options": { "default": "CURRENCY" },
          "comment": "Minimum commission amount per trade."
        },
        "minCommissionAsset": {
          "type": "string",
          "id": 23,
          "options": { "default": "USD" },
          "comment": "Minimum commission Type. See ProtoOAMinCommissionType for details."
        },
        "rolloverCommission": {
          "type": "int64",
          "id": 24,
          "comment": "Currency for minimum commission. (USD or quote currency)."
        },
        "skipRolloverDays": {
          "type": "int32",
          "id": 25,
          "comment": "Amount of commission per trade for Shariah Compliant accounts in deposit currency (swapFree = TRUE)."
        },
        "scheduleTimeZone": {
          "type": "string",
          "id": 26,
          "comment": "Initial period before the first rolloverCommission will be charged on the account."
        },
        "tradingMode": {
          "type": "ProtoOATradingMode",
          "id": 27,
          "options": { "default": "ENABLED" },
          "comment": "Time zone for the symbol trading intervals."
        },
        "rolloverCommission3Days": {
          "type": "ProtoOADayOfWeek",
          "id": 28,
          "options": { "default": "MONDAY" },
          "comment": "Rules for trading with the symbol. See ProtoOATradingMode for details."
        }
      },
      "comment": "Trading symbol entity."
    },
    "ProtoOALightSymbol": {
      "fields": {
        "symbolId": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs."
        },
        "symbolName": {
          "type": "string",
          "id": 2,
          "comment": "The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs."
        },
        "enabled": {
          "type": "bool",
          "id": 3,
          "comment": "Name of the symbol (e.g. EUR/USD)."
        },
        "baseAssetId": {
          "type": "int64",
          "id": 4,
          "comment": "If TRUE then symbol is visible for traders."
        },
        "quoteAssetId": { "type": "int64", "id": 5, "comment": "Base asset." },
        "symbolCategoryId": {
          "type": "int64",
          "id": 6,
          "comment": "Quote asset."
        },
        "description": {
          "type": "string",
          "id": 7,
          "comment": "Id of the symbol category used for symbols grouping."
        }
      },
      "comment": "Lightweight symbol entity."
    },
    "ProtoOASymbolCategory": {
      "fields": {
        "id": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "The unique identifier of the symbol category."
        },
        "assetClassId": {
          "rule": "required",
          "type": "int64",
          "id": 2,
          "comment": "The unique identifier of the symbol category."
        },
        "name": {
          "rule": "required",
          "type": "string",
          "id": 3,
          "comment": "Link to the asset class. One asset class can have many symbol categories."
        }
      },
      "comment": "Symbol category entity."
    },
    "ProtoOADayOfWeek": {
      "values": {
        "NONE": 0,
        "MONDAY": 1,
        "TUESDAY": 2,
        "WEDNESDAY": 3,
        "THURSDAY": 4,
        "FRIDAY": 5,
        "SATURDAY": 6,
        "SUNDAY": 7
      },
      "comments": {
        "NONE": null,
        "MONDAY": null,
        "TUESDAY": null,
        "WEDNESDAY": null,
        "THURSDAY": null,
        "FRIDAY": null,
        "SATURDAY": null,
        "SUNDAY": null
      }
    },
    "ProtoOAInterval": {
      "fields": {
        "startSecond": {
          "rule": "required",
          "type": "uint32",
          "id": 3,
          "comment": "Interval start, specified in seconds starting from SUNDAY 00:00 in specified time zone (inclusive to the interval)."
        },
        "endSecond": {
          "rule": "required",
          "type": "uint32",
          "id": 4,
          "comment": "Interval start, specified in seconds starting from SUNDAY 00:00 in specified time zone (inclusive to the interval)."
        }
      },
      "comment": "Symbol trading session entity."
    },
    "ProtoOACommissionType": {
      "values": {
        "USD_PER_MIL_USD": 1,
        "USD_PER_LOT": 2,
        "PERCENTAGE": 3,
        "QUOTE_CCY_PER_LOT": 4
      },
      "comment": "Enum for specifying type of trading commission.",
      "comments": {
        "USD_PER_MIL_USD": "USD per million USD volume - usually used for FX. Example: 50 USD for 1 mil USD of trading volume. In cents.",
        "USD_PER_LOT": "USD per million USD volume - usually used for FX. Example: 50 USD for 1 mil USD of trading volume. In cents.",
        "PERCENTAGE": "USD per 1 lot - usually used for CFDs and futures for commodities, and indices. Example: 15 USD for 1 contract. In cents.",
        "QUOTE_CCY_PER_LOT": "Percentage of trading volume - usually used for Equities. Example: 0.005% of notional trading volume. Multiplied by 100,00."
      }
    },
    "ProtoOASymbolDistanceType": {
      "values": {
        "SYMBOL_DISTANCE_IN_POINTS": 1,
        "SYMBOL_DISTANCE_IN_PERCENTAGE": 2
      },
      "comment": "Enum for specifying stop loss and take profit distances.",
      "comments": {
        "SYMBOL_DISTANCE_IN_POINTS": null,
        "SYMBOL_DISTANCE_IN_PERCENTAGE": null
      }
    },
    "ProtoOAMinCommissionType": {
      "values": { "CURRENCY": 1, "QUOTE_CURRENCY": 2 },
      "comment": "Enum for specifying type of minimum trading commission.",
      "comments": { "CURRENCY": null, "QUOTE_CURRENCY": null }
    },
    "ProtoOATradingMode": {
      "values": {
        "ENABLED": 0,
        "DISABLED_WITHOUT_PENDINGS_EXECUTION": 1,
        "DISABLED_WITH_PENDINGS_EXECUTION": 2,
        "CLOSE_ONLY_MODE": 3
      },
      "comment": "Enum for specifying symbol trading mode.",
      "comments": {
        "ENABLED": null,
        "DISABLED_WITHOUT_PENDINGS_EXECUTION": null,
        "DISABLED_WITH_PENDINGS_EXECUTION": null,
        "CLOSE_ONLY_MODE": null
      }
    },
    "ProtoOAAccessRights": {
      "values": {
        "FULL_ACCESS": 0,
        "CLOSE_ONLY": 1,
        "NO_TRADING": 2,
        "NO_LOGIN": 3
      },
      "comment": "Enum for specifying access right for a trader.",
      "comments": {
        "FULL_ACCESS": "Enable all trading.",
        "CLOSE_ONLY": "Enable all trading.",
        "NO_TRADING": "Only closing trading request are enabled.",
        "NO_LOGIN": "View only access."
      }
    },
    "ProtoOATotalMarginCalculationType": {
      "values": { "MAX": 0, "SUM": 1, "NET": 2 },
      "comment": "Enum for specifying margin calculation type for an account.",
      "comments": { "MAX": null, "SUM": null, "NET": null }
    },
    "ProtoOAAccountType": {
      "values": { "HEDGED": 0, "NETTED": 1, "SPREAD_BETTING": 2 },
      "comment": "Enum for specifying type of an account.",
      "comments": {
        "HEDGED": "Allows multiple positions on a trading account for a symbol.",
        "NETTED": "Allows multiple positions on a trading account for a symbol.",
        "SPREAD_BETTING": "Only one position per symbol is allowed on a trading account."
      }
    },
    "ProtoOATrader": {
      "fields": {
        "ctidTraderAccountId": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "The unique Trader's Account ID used to match the responses to the Trader's Account."
        },
        "balance": {
          "rule": "required",
          "type": "int64",
          "id": 2,
          "comment": "The unique Trader's Account ID used to match the responses to the Trader's Account."
        },
        "balanceVersion": {
          "type": "int64",
          "id": 3,
          "comment": "Current account balance in cents (e.g. If USD 100.00 then value = 10000)."
        },
        "managerBonus": {
          "type": "int64",
          "id": 4,
          "comment": "Balance version used to identify the final balance. Increments each time when the trader's account balance is changed."
        },
        "ibBonus": {
          "type": "int64",
          "id": 5,
          "comment": "Amount of broker's bonus allocated to the account in cents."
        },
        "nonWithdrawableBonus": {
          "type": "int64",
          "id": 6,
          "comment": "Amount of introducing broker bonus allocated to the account cents."
        },
        "accessRights": {
          "type": "ProtoOAAccessRights",
          "id": 7,
          "options": { "default": "FULL_ACCESS" },
          "comment": "Broker's bonus that cannot be withdrew from the account as cash."
        },
        "depositAssetId": {
          "rule": "required",
          "type": "int64",
          "id": 8,
          "comment": "Access rights that an owner has to the account in cTrader platform. See ProtoOAAccessRights for details."
        },
        "swapFree": {
          "type": "bool",
          "id": 9,
          "comment": "Deposit currency of the account."
        },
        "leverageInCents": {
          "type": "uint32",
          "id": 10,
          "comment": "If TRUE than account is Shariah compliant."
        },
        "totalMarginCalculationType": {
          "type": "ProtoOATotalMarginCalculationType",
          "id": 11,
          "comment": "Account leverage (e.g. If leverage = 1:50 then value = 5000)."
        },
        "maxLeverage": {
          "type": "uint32",
          "id": 12,
          "comment": "Margin computation type for the account (MAX, SUM, NET)."
        },
        "frenchRisk": {
          "type": "bool",
          "id": 13,
          "comment": "Maximum allowed leverage for the account. Used as validation when a Trader can change leverage value."
        },
        "traderLogin": {
          "type": "int64",
          "id": 14,
          "comment": "If TRUE then account is AMF compliant."
        },
        "accountType": {
          "type": "ProtoOAAccountType",
          "id": 15,
          "options": { "default": "HEDGED" },
          "comment": "ID of the account that is unique per server (Broker)."
        },
        "brokerName": {
          "type": "string",
          "id": 16,
          "comment": "Account type: HEDGED, NETTED, etc."
        },
        "registrationTimestamp": {
          "type": "int64",
          "id": 17,
          "comment": "Some whitelabel assigned to trader by broker at the moment of account creation."
        }
      },
      "comment": "Trading account entity."
    },
    "ProtoOAPositionStatus": {
      "values": {
        "POSITION_STATUS_OPEN": 1,
        "POSITION_STATUS_CLOSED": 2,
        "POSITION_STATUS_CREATED": 3,
        "POSITION_STATUS_ERROR": 4
      },
      "comment": "Position status ENUM.",
      "comments": {
        "POSITION_STATUS_OPEN": null,
        "POSITION_STATUS_CLOSED": null,
        "POSITION_STATUS_CREATED": "Empty position is created for pending order.",
        "POSITION_STATUS_ERROR": "Empty position is created for pending order."
      }
    },
    "ProtoOATradeSide": {
      "values": { "BUY": 1, "SELL": 2 },
      "comment": "Trader side ENUM. Used for order, position, deal.",
      "comments": { "BUY": null, "SELL": null }
    },
    "ProtoOAOrderType": {
      "values": {
        "MARKET": 1,
        "LIMIT": 2,
        "STOP": 3,
        "STOP_LOSS_TAKE_PROFIT": 4,
        "MARKET_RANGE": 5,
        "STOP_LIMIT": 6
      },
      "comment": "Order type ENUM.",
      "comments": {
        "MARKET": null,
        "LIMIT": null,
        "STOP": null,
        "STOP_LOSS_TAKE_PROFIT": null,
        "MARKET_RANGE": null,
        "STOP_LIMIT": null
      }
    },
    "ProtoOATimeInForce": {
      "values": {
        "GOOD_TILL_DATE": 1,
        "GOOD_TILL_CANCEL": 2,
        "IMMEDIATE_OR_CANCEL": 3,
        "FILL_OR_KILL": 4,
        "MARKET_ON_OPEN": 5
      },
      "comment": "Order's time in force ENUM.",
      "comments": {
        "GOOD_TILL_DATE": null,
        "GOOD_TILL_CANCEL": null,
        "IMMEDIATE_OR_CANCEL": null,
        "FILL_OR_KILL": null,
        "MARKET_ON_OPEN": null
      }
    },
    "ProtoOAOrderStatus": {
      "values": {
        "ORDER_STATUS_ACCEPTED": 1,
        "ORDER_STATUS_FILLED": 2,
        "ORDER_STATUS_REJECTED": 3,
        "ORDER_STATUS_EXPIRED": 4,
        "ORDER_STATUS_CANCELLED": 5
      },
      "comment": "Order status ENUM.",
      "comments": {
        "ORDER_STATUS_ACCEPTED": "Order request validated and accepted for execution.",
        "ORDER_STATUS_FILLED": "Order request validated and accepted for execution.",
        "ORDER_STATUS_REJECTED": "Order is fully filled.",
        "ORDER_STATUS_EXPIRED": "Order is rejected due to validation.",
        "ORDER_STATUS_CANCELLED": "Order expired. Might be valid for orders with partially filled volume that were expired on LP."
      }
    },
    "ProtoOAOrderTriggerMethod": {
      "values": {
        "TRADE": 1,
        "OPPOSITE": 2,
        "DOUBLE_TRADE": 3,
        "DOUBLE_OPPOSITE": 4
      },
      "comment": "Stop Order and Stop Lost triggering method ENUM.",
      "comments": {
        "TRADE": "Stop Order: buy is triggered by ask, sell by bid; Stop Loss Order: for buy position is triggered by bid and for sell position by ask.",
        "OPPOSITE": "Stop Order: buy is triggered by ask, sell by bid; Stop Loss Order: for buy position is triggered by bid and for sell position by ask.",
        "DOUBLE_TRADE": "Stop Order: buy is triggered by bid, sell by ask; Stop Loss Order: for buy position is triggered by ask and for sell position by bid.",
        "DOUBLE_OPPOSITE": "The same as TRADE, but trigger is checked after the second consecutive tick."
      }
    },
    "ProtoOAPosition": {
      "fields": {
        "positionId": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "The unique ID of the position. Note: trader might have two positions with the same id if positions are taken from accounts from different brokers."
        },
        "tradeData": {
          "rule": "required",
          "type": "ProtoOATradeData",
          "id": 2,
          "comment": "The unique ID of the position. Note: trader might have two positions with the same id if positions are taken from accounts from different brokers."
        },
        "positionStatus": {
          "rule": "required",
          "type": "ProtoOAPositionStatus",
          "id": 3,
          "comment": "Position details. See ProtoOATradeData for details."
        },
        "swap": {
          "rule": "required",
          "type": "int64",
          "id": 4,
          "comment": "Current status of the position."
        },
        "price": {
          "type": "double",
          "id": 5,
          "comment": "Total amount of charged swap on open position."
        },
        "stopLoss": {
          "type": "double",
          "id": 6,
          "comment": "VWAP price of the position based on all executions (orders) linked to the position."
        },
        "takeProfit": {
          "type": "double",
          "id": 7,
          "comment": "Current stop loss price."
        },
        "utcLastUpdateTimestamp": {
          "type": "int64",
          "id": 8,
          "comment": "Current take profit price."
        },
        "commission": {
          "type": "int64",
          "id": 9,
          "comment": "Time of the last change of the position, including amend SL/TP of the position, execution of related order, cancel or related order, etc."
        },
        "marginRate": {
          "type": "double",
          "id": 10,
          "comment": "Current unrealized commission related to the position."
        },
        "mirroringCommission": {
          "type": "int64",
          "id": 11,
          "comment": "Rate for used margin computation. Represented as Base/Deposit."
        },
        "guaranteedStopLoss": {
          "type": "bool",
          "id": 12,
          "comment": "Amount of unrealized commission related to following of strategy provider."
        },
        "usedMargin": {
          "type": "uint64",
          "id": 13,
          "comment": "If TRUE then position's stop loss is guaranteedStopLoss."
        },
        "stopLossTriggerMethod": {
          "type": "ProtoOAOrderTriggerMethod",
          "id": 14,
          "options": { "default": "TRADE" },
          "comment": "Amount of margin used for the position in deposit currency."
        }
      },
      "comment": "Trade position entity."
    },
    "ProtoOATradeData": {
      "fields": {
        "symbolId": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs."
        },
        "volume": {
          "rule": "required",
          "type": "int64",
          "id": 2,
          "comment": "The unique identifier of the symbol in specific server environment within cTrader platform. Different brokers might have different IDs."
        },
        "tradeSide": {
          "rule": "required",
          "type": "ProtoOATradeSide",
          "id": 3,
          "comment": "Volume in cents."
        },
        "openTimestamp": { "type": "int64", "id": 4, "comment": "Buy, Sell." },
        "label": {
          "type": "string",
          "id": 5,
          "comment": "Time when position was opened or order was created."
        },
        "guaranteedStopLoss": {
          "type": "bool",
          "id": 6,
          "comment": "Text label specified during order request."
        }
      },
      "comment": "Position/order trading details entity."
    },
    "ProtoOAOrder": {
      "fields": {
        "orderId": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "The unique ID of the order. Note: trader might have two orders with the same id if orders are taken from accounts from different brokers."
        },
        "tradeData": {
          "rule": "required",
          "type": "ProtoOATradeData",
          "id": 2,
          "comment": "The unique ID of the order. Note: trader might have two orders with the same id if orders are taken from accounts from different brokers."
        },
        "orderType": {
          "rule": "required",
          "type": "ProtoOAOrderType",
          "id": 3,
          "comment": "Detailed trader data."
        },
        "orderStatus": {
          "rule": "required",
          "type": "ProtoOAOrderStatus",
          "id": 4,
          "comment": "Order type."
        },
        "expirationTimestamp": {
          "type": "int64",
          "id": 6,
          "comment": "Order status."
        },
        "executionPrice": {
          "type": "double",
          "id": 7,
          "comment": "If the order has time in force GTD then expiration is specified."
        },
        "executedVolume": {
          "type": "int64",
          "id": 8,
          "comment": "Price at which an order was executed. For order with FILLED status."
        },
        "utcLastUpdateTimestamp": {
          "type": "int64",
          "id": 9,
          "comment": "Part of the volume that was filled."
        },
        "baseSlippagePrice": {
          "type": "double",
          "id": 10,
          "comment": "Timestamp of the last update of the order."
        },
        "slippageInPoints": {
          "type": "int64",
          "id": 11,
          "comment": "Used for Market Range order with combination of slippageInPoints to specify price range were order can be executed."
        },
        "closingOrder": {
          "type": "bool",
          "id": 12,
          "comment": "Used for Market Range and STOP_LIMIT orders to to specify price range were order can be executed."
        },
        "limitPrice": {
          "type": "double",
          "id": 13,
          "comment": "If TRUE then the order is closing part of whole position. Must have specified positionId."
        },
        "stopPrice": {
          "type": "double",
          "id": 14,
          "comment": "Valid only for LIMIT orders."
        },
        "stopLoss": {
          "type": "double",
          "id": 15,
          "comment": "Valid only for STOP and STOP_LIMIT orders."
        },
        "takeProfit": {
          "type": "double",
          "id": 16,
          "comment": "Absolute stopLoss price."
        },
        "clientOrderId": {
          "type": "string",
          "id": 17,
          "comment": "Absolute takeProfit price."
        },
        "timeInForce": {
          "type": "ProtoOATimeInForce",
          "id": 18,
          "options": { "default": "IMMEDIATE_OR_CANCEL" },
          "comment": "Optional ClientOrderId. Max Length = 50 chars."
        },
        "positionId": {
          "type": "int64",
          "id": 19,
          "comment": "Order's time in force. Depends on order type."
        },
        "relativeStopLoss": {
          "type": "int64",
          "id": 20,
          "comment": "ID of the position linked to the order (e.g. closing order, order that increase volume of a specific position, etc.)."
        },
        "relativeTakeProfit": {
          "type": "int64",
          "id": 21,
          "comment": "Relative stopLoss that can be specified instead of absolute as one. Specified in 1/100'000 of unit of a price. For BUY stopLoss = entryPrice - relativeStopLoss, for SELL stopLoss = entryPrice + relativeStopLoss."
        },
        "isStopOut": {
          "type": "bool",
          "id": 22,
          "comment": "Relative takeProfit that can be specified instead of absolute one. Specified in 1/100'000 of unit of a price. ForBUY takeProfit = entryPrice + relativeTakeProfit, for SELL takeProfit = entryPrice - relativeTakeProfit."
        },
        "trailingStopLoss": {
          "type": "bool",
          "id": 23,
          "comment": "If TRUE then order was stopped out from server side."
        },
        "stopTriggerMethod": {
          "type": "ProtoOAOrderTriggerMethod",
          "id": 24,
          "options": { "default": "TRADE" },
          "comment": "If TRUE then order is trailingStopLoss. Valid for STOP_LOSS_TAKE_PROFIT order."
        }
      },
      "comment": "Trade order entity."
    },
    "ProtoOAExecutionType": {
      "values": {
        "ORDER_ACCEPTED": 2,
        "ORDER_FILLED": 3,
        "ORDER_REPLACED": 4,
        "ORDER_CANCELLED": 5,
        "ORDER_EXPIRED": 6,
        "ORDER_REJECTED": 7,
        "ORDER_CANCEL_REJECTED": 8,
        "SWAP": 9,
        "DEPOSIT_WITHDRAW": 10,
        "ORDER_PARTIAL_FILL": 11,
        "BONUS_DEPOSIT_WITHDRAW": 12
      },
      "comment": "Execution event type ENUM.",
      "comments": {
        "ORDER_ACCEPTED": "Order passed validation.",
        "ORDER_FILLED": "Order passed validation.",
        "ORDER_REPLACED": "Order filled.",
        "ORDER_CANCELLED": "Pending order is changed with a new one.",
        "ORDER_EXPIRED": "Order cancelled.",
        "ORDER_REJECTED": "Order with GTD time in force is expired.",
        "ORDER_CANCEL_REJECTED": "Order is rejected due to validations.",
        "SWAP": "Cancel order request is rejected.",
        "DEPOSIT_WITHDRAW": "Type related to SWAP execution events.",
        "ORDER_PARTIAL_FILL": "Type related to event of deposit or withdrawal cash flow operation.",
        "BONUS_DEPOSIT_WITHDRAW": "Order is partially filled."
      }
    },
    "ProtoOABonusDepositWithdraw": {
      "fields": {
        "operationType": {
          "rule": "required",
          "type": "ProtoOAChangeBonusType",
          "id": 1,
          "comment": "Type of the operation. Deposit/Withdrawal."
        },
        "bonusHistoryId": {
          "rule": "required",
          "type": "int64",
          "id": 2,
          "comment": "Type of the operation. Deposit/Withdrawal."
        },
        "managerBonus": {
          "rule": "required",
          "type": "int64",
          "id": 3,
          "comment": "The unique ID of the bonus deposit/withdrawal operation."
        },
        "managerDelta": {
          "rule": "required",
          "type": "int64",
          "id": 4,
          "comment": "Total amount of broker's bonus after the operation."
        },
        "ibBonus": {
          "rule": "required",
          "type": "int64",
          "id": 5,
          "comment": "Amount of bonus deposited/withdrew by manager."
        },
        "ibDelta": {
          "rule": "required",
          "type": "int64",
          "id": 6,
          "comment": "Total amount of introducing broker's bonus after the operation."
        },
        "changeBonusTimestamp": {
          "rule": "required",
          "type": "int64",
          "id": 7,
          "comment": "Amount of bonus deposited/withdrew by introducing broker."
        },
        "externalNote": {
          "type": "string",
          "id": 8,
          "comment": "Time when the bonus operation was executed."
        },
        "introducingBrokerId": {
          "type": "int64",
          "id": 9,
          "comment": "Note added to operation. Visible to the trader."
        }
      },
      "comment": "Bonus deposit/withdrawal entity."
    },
    "ProtoOAChangeBonusType": {
      "values": { "BONUS_DEPOSIT": 0, "BONUS_WITHDRAW": 1 },
      "comment": "Bonus operation type ENUM.",
      "comments": { "BONUS_DEPOSIT": null, "BONUS_WITHDRAW": null }
    },
    "ProtoOADepositWithdraw": {
      "fields": {
        "operationType": {
          "rule": "required",
          "type": "ProtoOAChangeBalanceType",
          "id": 1,
          "comment": "Type of the operation. Deposit/Withdrawal."
        },
        "balanceHistoryId": {
          "rule": "required",
          "type": "int64",
          "id": 2,
          "comment": "Type of the operation. Deposit/Withdrawal."
        },
        "balance": {
          "rule": "required",
          "type": "int64",
          "id": 3,
          "comment": "The unique ID of the deposit/withdrawal operation."
        },
        "delta": {
          "rule": "required",
          "type": "int64",
          "id": 4,
          "comment": "Account balance after the operation was executed."
        },
        "changeBalanceTimestamp": {
          "rule": "required",
          "type": "int64",
          "id": 5,
          "comment": "Amount of deposit/withdrawal operation."
        },
        "externalNote": {
          "type": "string",
          "id": 6,
          "comment": "Time when deposit/withdrawal operation was executed."
        },
        "balanceVersion": {
          "type": "int64",
          "id": 7,
          "comment": "Note added to operation. Visible to the trader."
        },
        "equity": {
          "type": "int64",
          "id": 8,
          "comment": "Balance version used to identify the final balance. Increments each time when the trader's account balance is changed."
        }
      },
      "comment": "Account deposit/withdrawal operation entity."
    },
    "ProtoOAChangeBalanceType": {
      "values": {
        "BALANCE_DEPOSIT": 0,
        "BALANCE_WITHDRAW": 1,
        "BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER": 3,
        "BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER": 4,
        "BALANCE_DEPOSIT_IB_COMMISSIONS": 5,
        "BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE": 6,
        "BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB": 7,
        "BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER": 8,
        "BALANCE_DEPOSIT_REBATE": 9,
        "BALANCE_WITHDRAW_REBATE": 10,
        "BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER": 11,
        "BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER": 12,
        "BALANCE_WITHDRAW_BONUS_COMPENSATION": 13,
        "BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER": 14,
        "BALANCE_DEPOSIT_DIVIDENDS": 15,
        "BALANCE_WITHDRAW_DIVIDENDS": 16,
        "BALANCE_WITHDRAW_GSL_CHARGE": 17,
        "BALANCE_WITHDRAW_ROLLOVER": 18,
        "BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS": 19,
        "BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS": 20,
        "BALANCE_DEPOSIT_SWAP": 21,
        "BALANCE_WITHDRAW_SWAP": 22,
        "BALANCE_DEPOSIT_MANAGEMENT_FEE": 27,
        "BALANCE_WITHDRAW_MANAGEMENT_FEE": 28,
        "BALANCE_DEPOSIT_PERFORMANCE_FEE": 29,
        "BALANCE_WITHDRAW_INACTIVITY_FEE": 35
      },
      "comment": "Balance operation entity. Covers all cash movement operations related to account, trading, IB operations, mirroring, etc.",
      "comments": {
        "BALANCE_DEPOSIT": "Cash deposit.",
        "BALANCE_WITHDRAW": "Cash deposit.",
        "BALANCE_DEPOSIT_STRATEGY_COMMISSION_INNER": "Cash withdrawal.",
        "BALANCE_WITHDRAW_STRATEGY_COMMISSION_INNER": "Received mirroring commission.",
        "BALANCE_DEPOSIT_IB_COMMISSIONS": "Paid mirroring commission.",
        "BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE": "For IB account. Commissions paid by trader.",
        "BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_SUB_IB": "For IB account. Withdrawal of commissions shared with broker.",
        "BALANCE_DEPOSIT_IB_SHARED_PERCENTAGE_FROM_BROKER": "For IB account. Commissions paid by sub-ibs.",
        "BALANCE_DEPOSIT_REBATE": "For IB account. Commissions paid by broker.",
        "BALANCE_WITHDRAW_REBATE": "Deposit rebate for trading volume for period.",
        "BALANCE_DEPOSIT_STRATEGY_COMMISSION_OUTER": "Withdrawal of rebate.",
        "BALANCE_WITHDRAW_STRATEGY_COMMISSION_OUTER": "Mirroring commission.",
        "BALANCE_WITHDRAW_BONUS_COMPENSATION": "Mirroring commission.",
        "BALANCE_WITHDRAW_IB_SHARED_PERCENTAGE_TO_BROKER": "For IB account. Share commission with the Broker.",
        "BALANCE_DEPOSIT_DIVIDENDS": "IB commissions.",
        "BALANCE_WITHDRAW_DIVIDENDS": "Deposit dividends payments.",
        "BALANCE_WITHDRAW_GSL_CHARGE": "Negative dividend charge for short position.",
        "BALANCE_WITHDRAW_ROLLOVER": "Charge for guaranteedStopLoss.",
        "BALANCE_DEPOSIT_NONWITHDRAWABLE_BONUS": "Charge of rollover fee for Shariah compliant accounts.",
        "BALANCE_WITHDRAW_NONWITHDRAWABLE_BONUS": "Broker's operation to deposit bonus.",
        "BALANCE_DEPOSIT_SWAP": "Broker's operation to withdrawal bonus.",
        "BALANCE_WITHDRAW_SWAP": "Deposits of negative SWAP.",
        "BALANCE_DEPOSIT_MANAGEMENT_FEE": "Mirroring commission.",
        "BALANCE_WITHDRAW_MANAGEMENT_FEE": "Mirroring commission.",
        "BALANCE_DEPOSIT_PERFORMANCE_FEE": "Mirroring commission.",
        "BALANCE_WITHDRAW_INACTIVITY_FEE": "Mirroring commission."
      }
    },
    "ProtoOADeal": {
      "fields": {
        "dealId": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "The unique ID of the execution deal."
        },
        "orderId": {
          "rule": "required",
          "type": "int64",
          "id": 2,
          "comment": "The unique ID of the execution deal."
        },
        "positionId": {
          "rule": "required",
          "type": "int64",
          "id": 3,
          "comment": "Source order of the deal."
        },
        "volume": {
          "rule": "required",
          "type": "int64",
          "id": 4,
          "comment": "Source position of the deal."
        },
        "filledVolume": {
          "rule": "required",
          "type": "int64",
          "id": 5,
          "comment": "Volume sent for execution, in cents."
        },
        "symbolId": {
          "rule": "required",
          "type": "int64",
          "id": 6,
          "comment": "Filled volume, in cents."
        },
        "createTimestamp": {
          "rule": "required",
          "type": "int64",
          "id": 7,
          "comment": "The unique identifier of the symbol in specific server environment within cTrader platform. Different servers have different IDs."
        },
        "executionTimestamp": {
          "rule": "required",
          "type": "int64",
          "id": 8,
          "comment": "Time when the deal was sent for execution."
        },
        "utcLastUpdateTimestamp": {
          "type": "int64",
          "id": 9,
          "comment": "Time when the deal was executed."
        },
        "executionPrice": {
          "type": "double",
          "id": 10,
          "comment": "Timestamp when the deal was created, executed or rejected."
        },
        "tradeSide": {
          "rule": "required",
          "type": "ProtoOATradeSide",
          "id": 11,
          "comment": "Execution price."
        },
        "dealStatus": {
          "rule": "required",
          "type": "ProtoOADealStatus",
          "id": 12,
          "comment": "Buy/Sell."
        },
        "marginRate": {
          "type": "double",
          "id": 13,
          "comment": "Status of the deal."
        },
        "commission": {
          "type": "int64",
          "id": 14,
          "comment": "Rate for used margin computation. Represented as Base/Deposit."
        },
        "baseToUsdConversionRate": {
          "type": "double",
          "id": 15,
          "comment": "Amount of trading commission associated with the deal."
        },
        "closePositionDetail": {
          "type": "ProtoOAClosePositionDetail",
          "id": 16,
          "comment": "Base to USD conversion rate on the time of deal execution."
        }
      },
      "comment": "Execution entity."
    },
    "ProtoOADealStatus": {
      "values": {
        "FILLED": 2,
        "PARTIALLY_FILLED": 3,
        "REJECTED": 4,
        "INTERNALLY_REJECTED": 5,
        "ERROR": 6,
        "MISSED": 7
      },
      "comment": "Deal status ENUM.",
      "comments": {
        "FILLED": "Deal filled.",
        "PARTIALLY_FILLED": "Deal filled.",
        "REJECTED": "Deal is partially filled.",
        "INTERNALLY_REJECTED": "Deal is correct but was rejected by liquidity provider (e.g. no liquidity).",
        "ERROR": "Deal rejected by server (e.g. no price quotes).",
        "MISSED": "Deal is rejected by LP due to error (e.g. symbol is unknown)."
      }
    },
    "ProtoOAClosePositionDetail": {
      "fields": {
        "entryPrice": {
          "rule": "required",
          "type": "double",
          "id": 1,
          "comment": "Position price at the moment of filling the closing order."
        },
        "grossProfit": {
          "rule": "required",
          "type": "int64",
          "id": 2,
          "comment": "Position price at the moment of filling the closing order."
        },
        "swap": {
          "rule": "required",
          "type": "int64",
          "id": 3,
          "comment": "Amount of realized gross profit after closing deal execution."
        },
        "commission": {
          "rule": "required",
          "type": "int64",
          "id": 4,
          "comment": "Amount of realized swap in cents related to closed volume."
        },
        "balance": {
          "rule": "required",
          "type": "int64",
          "id": 5,
          "comment": "Amount of realized commission in cents related to closed volume."
        },
        "quoteToDepositConversionRate": {
          "type": "double",
          "id": 6,
          "comment": "Account balance after closing deal execution."
        },
        "closedVolume": {
          "type": "int64",
          "id": 7,
          "comment": "Quote/Deposit currency conversion rate on the time of closing deal execution."
        },
        "balanceVersion": {
          "type": "int64",
          "id": 8,
          "comment": "Closed volume in cents."
        }
      },
      "comment": "Trading details for closing deal."
    },
    "ProtoOATrendbarPeriod": {
      "values": {
        "M1": 1,
        "M2": 2,
        "M3": 3,
        "M4": 4,
        "M5": 5,
        "M10": 6,
        "M15": 7,
        "M30": 8,
        "H1": 9,
        "H4": 10,
        "H12": 11,
        "D1": 12,
        "W1": 13,
        "MN1": 14
      },
      "comment": "Trendbar period ENUM.",
      "comments": {
        "M1": null,
        "M2": null,
        "M3": null,
        "M4": null,
        "M5": null,
        "M10": null,
        "M15": null,
        "M30": null,
        "H1": null,
        "H4": null,
        "H12": null,
        "D1": null,
        "W1": null,
        "MN1": null
      }
    },
    "ProtoOATrendbar": {
      "fields": {
        "volume": {
          "rule": "required",
          "type": "int64",
          "id": 3,
          "comment": "Bar volume in ticks."
        },
        "period": {
          "type": "ProtoOATrendbarPeriod",
          "id": 4,
          "options": { "default": "M1" },
          "comment": "Bar volume in ticks."
        },
        "low": { "type": "int64", "id": 5, "comment": "Bar period." },
        "deltaOpen": {
          "type": "uint64",
          "id": 6,
          "comment": "Low price of the bar."
        },
        "deltaClose": {
          "type": "uint64",
          "id": 7,
          "comment": "Delta between open and low price. open = low + deltaOpen."
        },
        "deltaHigh": {
          "type": "uint64",
          "id": 8,
          "comment": "Delta between open and low price. close = low + deltaClose."
        },
        "utcTimestampInMinutes": {
          "type": "uint32",
          "id": 9,
          "comment": "Delta between open and low price. high = low + deltaHigh."
        }
      },
      "comment": "Historical Trendbar entity."
    },
    "ProtoOAExpectedMargin": {
      "fields": {
        "volume": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "Volume in cents used for computation of expected margin."
        },
        "buyMargin": {
          "rule": "required",
          "type": "int64",
          "id": 2,
          "comment": "Volume in cents used for computation of expected margin."
        },
        "sellMargin": {
          "rule": "required",
          "type": "int64",
          "id": 3,
          "comment": "Buy margin amount in cents."
        }
      },
      "comment": "Expected margin computation entity."
    },
    "ProtoOAQuoteType": {
      "values": { "BID": 1, "ASK": 2 },
      "comment": "Price quote type.",
      "comments": { "BID": null, "ASK": null }
    },
    "ProtoOATickData": {
      "fields": {
        "timestamp": {
          "rule": "required",
          "type": "int64",
          "id": 1,
          "comment": "Tick timestamp."
        },
        "tick": {
          "rule": "required",
          "type": "int64",
          "id": 2,
          "comment": "Tick timestamp."
        }
      },
      "comment": "Historical tick data type."
    },
    "ProtoOAClientPermissionScope": {
      "values": { "SCOPE_VIEW": 0, "SCOPE_TRADE": 1 },
      "comment": "Open API application permission in regards to token ENUM.",
      "comments": {
        "SCOPE_VIEW": "Allows to use only view commends. Trade is prohibited.",
        "SCOPE_TRADE": "Allows to use only view commends. Trade is prohibited."
      }
    },
    "ProtoOACtidProfile": {
      "fields": { "userId": { "rule": "required", "type": "int64", "id": 1 } },
      "comment": "Trader profile entity. Empty due to GDPR."
    },
    "ProtoOACtidTraderAccount": {
      "fields": {
        "ctidTraderAccountId": {
          "rule": "required",
          "type": "uint64",
          "id": 1,
          "comment": "Unique identifier of the trader's account. Used to match responses to trader's accounts.cTrader platform. Different brokers might have different ids"
        },
        "isLive": {
          "type": "bool",
          "id": 2,
          "comment": "Unique identifier of the trader's account. Used to match responses to trader's accounts.cTrader platform. Different brokers might have different ids"
        },
        "traderLogin": {
          "type": "int64",
          "id": 3,
          "comment": "If TRUE then the account is belong to Live environment and live host must be used to authorize it"
        }
      },
      "comment": "Trader account entity."
    },
    "ProtoOAAssetClass": {
      "fields": {
        "id": { "type": "int64", "id": 1, "comment": "Unique asset ID." },
        "name": { "type": "string", "id": 2, "comment": "Unique asset ID." }
      },
      "comment": "Asset class entity."
    },
    "ProtoOADepthQuote": {
      "fields": {
        "id": {
          "rule": "required",
          "type": "uint64",
          "id": 1,
          "comment": "Quote ID."
        },
        "size": {
          "rule": "required",
          "type": "uint64",
          "id": 3,
          "comment": "Quote ID."
        },
        "bid": { "type": "uint64", "id": 4, "comment": "Quote size in cents." },
        "ask": {
          "type": "uint64",
          "id": 5,
          "comment": "Bid price for bid quotes."
        }
      },
      "comment": "Depth of market entity."
    },
    "ProtoOAErrorCode": {
      "values": {
        "OA_AUTH_TOKEN_EXPIRED": 1,
        "ACCOUNT_NOT_AUTHORIZED": 2,
        "INCORRECT_BOUNDARIES": 35,
        "CONNECTIONS_LIMIT_EXCEEDED": 67
      },
      "comment": "Error code ENUM.",
      "comments": {
        "OA_AUTH_TOKEN_EXPIRED": "When token used for account authorization is expired.",
        "ACCOUNT_NOT_AUTHORIZED": "When token used for account authorization is expired.",
        "INCORRECT_BOUNDARIES": "When account is not authorized.",
        "CONNECTIONS_LIMIT_EXCEEDED": "Used for time and numeric boundaries."
      }
    }
  }
}
